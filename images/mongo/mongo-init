#! /bin/bash

MONGO_USER=${MONGO_USER:?"MONGO_USER must be set"}
MONGO_PASSWORD=${MONGO_PASSWORD:?"MONGO_PASSWORD must be set"}
MONGO_DATABASE=${MONGO_DATABASE:?"MONGO_DATABASE must be set"}
MONGO_PORT=${MONGO_PORT:-27017}

while ! mongo --eval 'printjson({ "hi": "bye" })' &> /dev/null; do
  echo "Waiting for mongo to come online..."
  sleep 10
done

if [[ "$MONGO_ROLE" == "primary" ]]; then
# Initialize as a replset
if [[ ! -e /etc/mongo/init.js ]]; then
MMS_USER=${MMS_USER}
MMS_PASSWORD=${MMS_PASSWORD}

cat <<-INIT > /etc/mongo/init.js
code = rs.status().code
if (code == 94) {
  rs.initiate();
  while (!db.isMaster().ismaster) { sleep(5000) }

  db.createUser({
    "user": "${MONGO_USER}",
    "pwd": "${MONGO_PASSWORD}",
    "roles": [
      { "role": "root", "db": "admin" }
    ]
  });

  db.auth("${MONGO_USER}", "${MONGO_PASSWORD}");
  db.createUser({
    "user": "${MMS_USER}",
    "pwd": "${MMS_PASSWORD}",
    "roles": [
      { "role": "clusterMonitor", "db": "admin" }
    ]
  });

  db.grantRolesToUser('${MONGO_USER}', [ { role: "dbOwner", db: "${MONGO_DATABASE}" } ])
  db = db.getSiblingDB('${MONGO_DATABASE}')
  db.createUser({
    "user": "${MONGO_USER}",
    "pwd": "${MONGO_PASSWORD}",
    "roles": [
      { "role": "dbOwner", "db": "${MONGO_DATABASE}" }
    ]
  });

  cfg = rs.conf();
  cfg.members[0].priority = 2;
  rs.reconfig(cfg);
}
INIT
fi

mongo localhost:${MONGO_PORT}/admin /etc/mongo/init.js

elif [[ "$MONGO_REPLSET" == "" ]]; then
# Initialize as a standalone
if [[ ! -e /etc/mongo/init.js ]]; then
MMS_USER=${MMS_USER}
MMS_PASSWORD=${MMS_PASSWORD}

cat <<-INIT > /etc/mongo/init.js
  db.createUser({
    "user": "${MONGO_USER}",
    "pwd": "${MONGO_PASSWORD}",
    "roles": [
      { "role": "root", "db": "admin" }
    ]
  });

  db.auth("${MONGO_USER}", "${MONGO_PASSWORD}");

  db.createUser({
    "user": "${MMS_USER}",
    "pwd": "${MMS_PASSWORD}",
    "roles": [
      { "role": "clusterMonitor", "db": "admin" }
    ]
  });

  db.grantRolesToUser('${MONGO_USER}', [ { role: "dbOwner", db: "${MONGO_DATABASE}" } ])
  db = db.getSiblingDB('${MONGO_DATABASE}')
  db.createUser({
    "user": "${MONGO_USER}",
    "pwd": "${MONGO_PASSWORD}",
    "roles": [
      { "role": "dbOwner", "db": "${MONGO_DATABASE}" }
    ]
  });
INIT
fi

mongo localhost:${MONGO_PORT}/admin /etc/mongo/init.js

fi

# Add non-primary node to replset
if [[ "$MONGO_REPLSET" != "" && "$MONGO_ROLE" != "primary" ]]; then
  MONGO_PRIMARY=${MONGO_PRIMARY:?"MONGO_PRIMARY must be set"}
  added=
  while [[ "$added" != "${HOSTNAME}:${MONGO_PORT}" ]]; do
    # find the primary host
    primary=$(mongo $MONGO_PRIMARY/admin --eval "rs.isMaster().primary" | tail -n +3)

    # add self
    if [[ "$MONGO_ROLE" == "arbiter" ]]; then
      mongo $primary/admin -u ${MONGO_USER} -p${MONGO_PASSWORD} --eval "rs.addArb(\"${HOSTNAME}:${MONGO_PORT}\")"
      sleep 2
      # verify that self was added
      added=$(mongo $primary/admin -u ${MONGO_USER} -p${MONGO_PASSWORD} --eval "rs.isMaster().arbiters" | tail -n +3 | jq -r ".[] | select(. == \"${HOSTNAME}:${MONGO_PORT}\")")
    else
      mongo $primary/admin -u ${MONGO_USER} -p${MONGO_PASSWORD} --eval "rs.add(\"${HOSTNAME}:${MONGO_PORT}\")"
      sleep 2
      # verify that self was added
      added=$(mongo $primary/admin -u ${MONGO_USER} -p${MONGO_PASSWORD} --eval "rs.isMaster().hosts" | tail -n +3 | jq -r ".[] | select(. == \"${HOSTNAME}:${MONGO_PORT}\")")
    fi

  done
fi
