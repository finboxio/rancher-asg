#! /bin/bash

TAG_DEPLOYMENT_ID=${TAG_DEPLOYMENT_ID?"TAG_DEPLOYMENT_ID must be set"}
TAG_DEPLOYMENT_ROLE="server"

id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)

while [[ "$id" == "" || "$region" == "" ]]; do
  sleep 5
  id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
  region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
done

tags=$(aws ec2 describe-instances \
  --region $region \
  --instance-ids $id \
  | jq '.Reservations[].Instances[].Tags[]')

fleet=$(echo "$tags" | jq -r 'select(.Key == "aws:ec2spot:fleet-request-id") | .Value')
asg=$(echo "$tags" | jq -r 'select(.Key == "aws:autoscaling:groupName") | .Value')

# Every 10 minutes sync the tags of all instances in this group.
# This enables us to catch instances that may be healthy according to AWS
# but did not properly boot up and so may not be able to join the cluster
# or would otherwise be ignored by cluster healthchecks

while true; do
  if [[ "$fleet" != "" ]]; then
    instances=$(aws ec2 describe-instances \
    --region $region \
    --filter Name=tag:aws:ec2spot:fleet-request-id,Values=$fleet \
    | jq -r '.Reservations[].Instances[].InstanceId' \
    | xargs)
  elif [[ "$asg" != "" ]]; then
    instances=$(aws ec2 describe-instances \
    --region $region \
    --filter Name=tag:aws:autoscaling:groupName,Values=$asg \
    | jq -r '.Reservations[].Instances[].InstanceId' \
    | xargs)
  else
    instances=$id
  fi

  if [[ "$instances" != "" ]]; then
    aws ec2 create-tags \
      --region $region \
      --resources $instances \
      --tags Key=rancher-deployment-id,Value=$TAG_DEPLOYMENT_ID \
             Key=rancher-role,Value=$TAG_DEPLOYMENT_ROLE \
             Key=Name,Value=rancher-$TAG_DEPLOYMENT_ID
  fi

  sleep 600
done
