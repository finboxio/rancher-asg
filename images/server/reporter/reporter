#! /bin/bash

CLUSTER_CAPACITY=${CLUSTER_CAPACITY?"CLUSTER_CAPACITY must be set"}
MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD?"MYSQL_ROOT_PASSWORD must be set"}
RANCHER_HOSTNAME=${RANCHER_HOSTNAME?"RANCHER_HOSTNAME must be set"}

INSTANCE_ID=$(curl -sf http://instance-data/latest/meta-data/instance-id)
CHECK_INTERVAL=${CHECK_INTERVAL:-10}
ALERT_COUNT=${ALERT_COUNT:-30}
FALL_COUNT=${FALL_COUNT:-2}
RISE_COUNT=${RISE_COUNT:-2}
MYSQLCHECK_PORT=${MYSQLCHECK_PORT:-2488}
HAPROXY_MYSQL_PORT=${HAPROXY_MYSQL_PORT:-3307}

UNHEALTHY_SIZE=$FALL_COUNT
UNHEALTHY_MYSQL=$FALL_COUNT
UNHEALTHY_MYSQL_LEADER=$FALL_COUNT
UNHEALTHY_RANCHER=$FALL_COUNT
UNHEALTHY_HAPROXY_MYSQL=$FALL_COUNT
UNHEALTHY_DNS_HTTP=$FALL_COUNT
UNHEALTHY_DNS_HTTPS=$FALL_COUNT

first_time="true"
passed=
pass=
fail=
function check_health () {
  rising=
  unhealthy=$1
  healthy=$(test "$unhealthy" -eq 0 && echo "true")
  if [[ "$healthy" != "true" && "$passed" == "true" ]]; then
    rising="true"
    unhealthy=$((unhealthy - 1))
    if [[ "$unhealthy" -ge "$RISE_COUNT" ]]; then
      unhealthy=$((RISE_COUNT - 1))
    fi
    if [[ "$unhealthy" -eq 0 ]]; then
      echo "Host $INSTANCE_ID says that $pass" | slack -p -a "good" &> /dev/null
    fi
  elif [[ "$passed" != "true" ]]; then
    unhealthy=$((unhealthy + 1))
    if [[ "$unhealthy" -ge "$((ALERT_COUNT + FALL_COUNT))" ]]; then
      unhealthy=$FALL_COUNT
    fi
  fi

  if [[ "$unhealthy" -eq "$FALL_COUNT" && "$rising" != "true" ]]; then
    echo "Host $INSTANCE_ID says that $fail" | slack -p -a "danger" &> /dev/null
  fi
  echo $unhealthy
}

healthy_streak=0
while true; do
  new_pass="false"
  fail_count=0

  # Is cluster at full capacity?
  servers=$(serf members -format json \
    | jq -r '.members
      | sort_by(.tags.up)
      | .[]
      | select(.status == "alive")
      | select(.tags.role == "server")
      | .addr' \
    | awk -F: '{ print $1 }' \
    | wc -w)
  pass="the rancher server pool is now at full capacity ($servers of $CLUSTER_CAPACITY online)"
  fail="the rancher server pool is running at reduced capacity ($servers of $CLUSTER_CAPACITY online)"
  passed=$(test "$servers" -ge "$CLUSTER_CAPACITY" && echo "true")
  UNHEALTHY_SIZE=$(check_health $UNHEALTHY_SIZE)
  if [[ "$UNHEALTHY_SIZE" -gt 0 ]]; then fail_count=$((fail_count + 1)); fi

  # Is mysql healthy?
  pass="its local mysql instance is now healthy"
  fail="its local mysql instance is unhealthy"
  passed=$(curl -sf --max-time 2 http://localhost:$MYSQLCHECK_PORT &> /dev/null && echo "true")
  UNHEALTHY_MYSQL=$(check_health $UNHEALTHY_MYSQL)
  if [[ "$UNHEALTHY_MYSQL" -gt 0 ]]; then fail_count=$((fail_count + 1)); fi

  # Is mysql reachable via haproxy?
  pass="the mysql leader is now reachable via haproxy"
  fail="the mysql leader is unreachable via haproxy"
  passed=$(mysql --protocol tcp --host localhost --port $HAPROXY_MYSQL_PORT --user root -p$MYSQL_ROOT_PASSWORD -sse "select 'true';")
  UNHEALTHY_HAPROXY_MYSQL=$(check_health $UNHEALTHY_HAPROXY_MYSQL)

  if [[ "$UNHEALTHY_HAPROXY_MYSQL" -gt 0 ]]; then fail_count=$((fail_count + 1)); fi

  if [[ "$UNHEALTHY_HAPROXY_MYSQL" -eq 0 ]]; then
    # Are all servers routing to the same mysql instance?
    leaders=$(serf members -format json \
      | jq -r '.members[] | select(.status == "alive") | select(.tags.role == "server") | .addr' \
      | cut -d: -f1 \
      | xargs -I{} -0 mysql --protocol tcp --host {} --port $HAPROXY_MYSQL_PORT --user root -p$MYSQL_ROOT_PASSWORD -sse "select VARIABLE_VALUE from information_schema.GLOBAL_STATUS where VARIABLE_NAME='wsrep_local_index';" \
      | sort \
      | uniq \
      | wc -w)
    pass="the same mysql leader is now recognized by all servers"
    fail="all servers do not agree about the mysql leader"
    passed=$(test "$leaders" -eq 1 && echo "true")
    UNHEALTHY_MYSQL_LEADER=$(check_health $UNHEALTHY_MYSQL_LEADER)
    if [[ "$UNHEALTHY_MYSQL_LEADER" -gt 0 ]]; then fail_count=$((fail_count + 1)); fi

    # Is rancher healthy?
    pong=$(curl -sf --max-time 2 http://localhost:8080/ping)
    pass="its local rancher instance is now healthy"
    fail="its local rancher instance is unhealthy"
    passed=$(test "$pong" == "pong" && echo "true")
    UNHEALTHY_RANCHER=$(check_health $UNHEALTHY_RANCHER)
    if [[ "$UNHEALTHY_RANCHER" -gt 0 ]]; then fail_count=$((fail_count + 1)); fi
  else
    UNHEALTHY_MYSQL_LEADER=$FALL_COUNT
    UNHEALTHY_RANCHER=$FALL_COUNT
  fi

  # Is http://rancher reachable via external dns?
  pong=$(curl -L -sf --max-time 2 http://${RANCHER_HOSTNAME}/ping)
  pass="the rancher leader is now externally reachable via http"
  fail="the rancher leader is unreachable externally via http"
  passed=$(test "$pong" == "pong" && echo "true")
  UNHEALTHY_DNS_HTTP=$(check_health $UNHEALTHY_DNS_HTTP)
  if [[ "$UNHEALTHY_DNS_HTTP" -gt 0 ]]; then fail_count=$((fail_count + 1)); fi

  # Is https://rancher reachable via external dns?
  pong=$(curl -L -sf --max-time 2 https://${RANCHER_HOSTNAME}/ping)
  pass="the rancher leader is now externally reachable via https"
  fail="the rancher leader is unreachable externally via https"
  passed=$(test "$pong" == "pong" && echo "true")
  UNHEALTHY_DNS_HTTPS=$(check_health $UNHEALTHY_DNS_HTTPS)
  if [[ "$UNHEALTHY_DNS_HTTPS" -gt 0 ]]; then fail_count=$((fail_count + 1)); fi

  if [[ "$fail_count" -eq 0 ]]; then
    healthy_streak=$((healthy_streak + 1))
  else
    healthy_streak=0
  fi

  if [[ "$healthy_streak" -eq 1 ]]; then
    echo ":ok_hand: Host $INSTANCE_ID says that all systems are go!" | slack -p -a 'good' &> /dev/null
  fi

  if [[ "$healthy_streak" -eq 1 && "$first_time" == "true" ]]; then
    url="https://${RANCHER_HOSTNAME}"
    echo ":cow: Saddle up, cowboy! Your Rancher server is waiting for you at $url" | slack -p -a 'good' -g 'https://cldup.com/IF7C-8RqEt.gif' &> /dev/null
    first_time=
  fi

  sleep $CHECK_INTERVAL
done
