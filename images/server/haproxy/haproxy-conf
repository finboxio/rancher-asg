#! /bin/bash

UPDATE_INTERVAL=${UPDATE_INTERVAL:-2}
RANCHER_HOSTNAME=${RANCHER_HOSTNAME:?"RANCHER_HOSTNAME must be set"}
HAPROXY_HTTPS_REDIRECT=${HAPROXY_HTTPS_REDIRECT:-false}
HAPROXY_MYSQL_PORT=${HAPROXY_MYSQL_PORT:-3307}
HAPROXY_WWW_PORT=${HAPROXY_WWW_PORT:-80}
HAPROXY_WWW_PROXY=${HAPROXY_WWW_PROXY:-81}
HAPROXY_HEALTHCHECK_PATH=${HAPROXY_HEALTHCHECK_PATH:-/health}
HAPROXY_DIR=${HAPROXY_DIR:-/etc/haproxy}
HAPROXY_CONTAINER=${HAPROXY_CONTAINER:-haproxy}
RANCHER_PORT=${RANCHER_PORT:-8080}
STATS_PORT=${STATS_PORT:-9090}
MYSQL_PORT=${MYSQL_PORT:-3306}
MYSQLCHECK_PORT=${MYSQLCHECK_PORT:-2488}
GRAPHITE_PORT=${GRAPHITE_PORT:-9108}
SERF_CONTAINER=${SERF_CONTAINER:-serf}
GRACE_PERIOD=${GRACE_PERIOD:-30}

# If serf is not running, continue on
if ! (system-docker inspect $SERF_CONTAINER &> /dev/null); then
  echo "Cannot start haproxy-conf because serf is not running. Exiting in 30s"
  sleep 30
  exit 1
fi

# Allow grace period to make sure serf is stable before registering
current=$(date +%s)
started=$(date -d "$(docker inspect $SERF_CONTAINER \
  | jq -r .[0].State.StartedAt \
  | cut -d . -f 1 \
  | awk '{print $1}' \
  | tr 'T' ' ')" +%s)
uptime=$((current - started))
if [[ "$uptime" -lt "$GRACE_PERIOD" ]]; then
  echo "Cannot start haproxy-conf because serf is not ready. Exiting in 30s"
  sleep 30
  exit 1
fi

id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
ip=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)

if [[ "$id" == "" || "$ip" == "" ]]; then
	echo "Cannot start haproxy-conf because instance metadata is not available. Exiting in 30s"
	sleep 30
	exit 1
fi

if [[ ! -e /etc/haproxy/haproxy.cfg.tmpl ]]; then
	cp /usr/local/etc/haproxy/haproxy.cfg.tmpl /etc/haproxy/haproxy.cfg.tmpl
fi

if [[ ! -e /etc/haproxy/haproxy.cfg ]]; then
	read -r -d '' config <<-EOF
		ssl: $HAPROXY_HTTPS_REDIRECT
		www: $HAPROXY_WWW_PORT
		proxy: $HAPROXY_WWW_PROXY
		galera: $HAPROXY_MYSQL_PORT
		url: $RANCHER_HOSTNAME
		rancher: $RANCHER_PORT
		mysql: $MYSQL_PORT
		mysqlcheck: $MYSQLCHECK_PORT
		stats: $STATS_PORT
		graphite: $GRAPHITE_PORT
		health: $HAPROXY_HEALTHCHECK_PATH
		ip: $id
		members:
			- $id
	EOF
	echo "$config" > $HAPROXY_DIR/config.yml
	gotpl $HAPROXY_DIR/haproxy.cfg.tmpl < $HAPROXY_DIR/config.yml > $HAPROXY_DIR/haproxy.cfg
fi

while true; do
	# Wait for next check interval
	sleep $UPDATE_INTERVAL

	# Get current memberlist and config
	members=$(serf members -format json \
	| jq -r '.members
		| sort_by(.tags.up)
		| .[]
		| select(.status == "alive")
		| select(.tags.role == "server")
		| .addr' \
	| awk -F: '{ print "  - "$1 }')

	previous=$(cat $HAPROXY_DIR/config.yml)
	read -r -d '' config <<-EOF
		ssl: $HAPROXY_HTTPS_REDIRECT
		www: $HAPROXY_WWW_PORT
		proxy: $HAPROXY_WWW_PROXY
		galera: $HAPROXY_MYSQL_PORT
		url: $RANCHER_HOSTNAME
		rancher: $RANCHER_PORT
		mysql: $MYSQL_PORT
		mysqlcheck: $MYSQLCHECK_PORT
		stats: $STATS_PORT
		graphite: $GRAPHITE_PORT
		health: $HAPROXY_HEALTHCHECK_PATH
		ip: $id
		members:
			$members
	EOF

	# Check if config has changed
	if [[ "$config" != "$previous" ]]; then

		echo "Previous: "
		echo "$previous"
		echo ""
		echo "New: "
		echo "$config"

		# Generate new template
		echo "$config" > $HAPROXY_DIR/config.yml
		gotpl $HAPROXY_DIR/haproxy.cfg.tmpl < $HAPROXY_DIR/config.yml > $HAPROXY_DIR/haproxy.cfg.pre

		# Check that config is valid
		if haproxy -c -f $HAPROXY_DIR/haproxy.cfg.pre; then
			mv $HAPROXY_DIR/haproxy.cfg.pre $HAPROXY_DIR/haproxy.cfg
			system-docker restart $HAPROXY_CONTAINER
			echo "Successfully reloaded HAProxy on host $id" | slack -p -a 'good'
		else
			echo "Failed to reload HAProxy on host $id" | slack -p -a 'danger'
		fi

	fi
done
