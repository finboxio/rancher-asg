#! /bin/bash

id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)

if [[ "$id" == "" || "$region" == "" ]]; then
  echo "Cannot join serf because instance metadata is not available. Exiting in 30s"
  sleep 30
  exit 1
fi

deployment=${TAG_DEPLOYMENT_ID:?"TAG_DEPLOYMENT_ID must be set"}
bucket=${STATUS_BUCKET:?"STATUS_BUCKET must be set"}

m=$(date +%M)
minute=$((m / 10))
hour=$(date +%Y-%m-%dT%H)
timestamp=$(echo $hour:$minute"0:00Z")

aws ec2 describe-instances \
  --region $region \
  --filters "Name=tag:rancher-deployment-id,Values=$deployment" \
  | jq -r '.Reservations[].Instances[]
    | select(.PrivateIpAddress != null)
    | .endpoint_url = "http://" + .PrivateIpAddress + ":2490"
    | .attempts = 3
    | .threshold_rtt = (5 * 1000 * 1000 * 1000)
    | .type = "http"
    | .role = (.Tags[] | select(.Key == "rancher-role") | .Value)
    | .environment = ((.Tags[] | select(.Key == "rancher-environment") | .Value) // "-")
    | .group = ((.Tags[] | select(.Key == "rancher-group") | .Value) // "-")
    | .endpoint_name = ((.role + "." + .environment + "." + .group + "." + .InstanceId) | gsub("[.]-"; ""))
    | { type, endpoint_name, endpoint_url, threshold_rtt, attempts }' \
  | jq -s '{ checkers: . }' \
  | jq '.concurrent_checks = 5' \
  | jq '.timestamp = "'$timestamp'"' \
  | jq '.storage.provider = "s3"' \
  | jq '.storage.bucket = "'$bucket'"' \
  | jq '.storage.region = "'$region'"' \
  | jq '.storage.check_expiry = (3 * 24 * 60 * 60 * 1000 * 1000 * 1000)' > checkup.json

checkup --store

