#! /bin/bash

TAG_DEPLOYMENT_ID=${TAG_DEPLOYMENT_ID:?"TAG_DEPLOYMENT_ID must be set"}
TERMINATOR_PORT=${TERMINATOR_PORT:-2489}
cluster_queue_url=${SQS_URL:?"SQS_URL url must be set"}

region=$(curl -s http://instance-data/latest/dynamic/instance-identity/document | jq -r .region)
my_ip=$(curl -s http://instance-data/latest/meta-data/local-ipv4)
my_id=$(curl -s http://instance-data/latest/meta-data/instance-id)

cluster_queue_arn=$(aws sqs get-queue-attributes \
  --region $region \
  --queue-url $cluster_queue_url \
  --attribute-names QueueArn \
  | jq -r .Attributes.QueueArn)

# Create SQS queue for instance state changes
instance_queue_name=rancher-$TAG_DEPLOYMENT_ID-shudder-queue-$my_id

instance_queue_url=$(aws sqs list-queues \
  --region $region \
  --queue-name-prefix $instance_queue_name \
  | jq -r .QueueUrls[0])

if [[ "$instance_queue_url" == "" ]]; then
  instance_queue_url=$(aws sqs create-queue \
    --region $region \
    --queue-name $instance_queue_name \
    | jq -r .QueueUrl)
fi

instance_queue_arn=$(aws sqs get-queue-attributes \
  --region $region \
  --queue-url $instance_queue_url \
  --attribute-names QueueArn \
  | jq -r .Attributes.QueueArn)

# Create cloudwatch rule for state changes
rule_name=rancher-$TAG_DEPLOYMENT_ID-shudder-rule-$my_id
rule_arn=$(aws events describe-rule \
  --region $region \
  --name $rule_name \
  | jq -r .Arn)

if [[ "$rule_arn" == "" ]]; then
  rule_pattern='"{\"source\":[\"aws.ec2\"],\"detail-type\":[\"EC2 Instance State-change Notification\"],\"detail\":{\"state\":[\"shutting-down\",\"stopped\",\"stopping\",\"terminated\"],\"instance-id\":[\"'$my_id'\"]}}"'
  cmd="aws events put-rule \
    --region $region \
    --name $rule_name \
    --event-pattern $rule_pattern \
    --description \"State change events for rancher instance $my_id\""
  rule_arn=$(eval $cmd | jq -r .RuleArn)
fi

# Grant permission for cloudwatch to send to instance SQS
policy='"{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":\"sqs:SendMessage\",\"Resource\":\"'$instance_queue_arn'\",\"Condition\":{\"ArnEquals\":{\"aws:SourceArn\":\"'$rule_arn'\"}}}]}"'
cmd="aws sqs set-queue-attributes \
  --region $region \
  --queue-url $instance_queue_url \
  --attributes 'Policy=$policy'"
eval $cmd

# Add instance-queue target to rule
target_name=rancher-$TAG_DEPLOYMENT_ID-shudder-$my_id-instance-target
aws events put-targets \
  --region $region \
  --rule $rule_name \
  --targets Id=$target_name,Arn=$instance_queue_arn

# Add cluster-queue target to rule
target_name=rancher-$TAG_DEPLOYMENT_ID-shudder-$my_id-cluster-target
aws events put-targets \
  --region $region \
  --rule $rule_name \
  --targets Id=$target_name,Arn=$cluster_queue_arn

while true; do
  sleep 3

  event=$(aws sqs receive-message \
    --region $region \
    --queue-url $instance_queue_url \
    | jq -r .Messages[])

  if [[ "$event" != "" ]]; then
    body=$(echo "$event" \
      | jq -r .Body \
      | sed 's/\\n/\n/' \
      | tr -d '\\' \
      | sed 's/"{/{/g' \
      | sed 's/}"/}/g' \
      | jq .)

    message_id=$(echo "$event" | jq -r .MessageId)
    receipt_handle=$(echo "$event" | jq -r .ReceiptHandle)
    state=$(echo "$body" | jq -r .detail.state)

    echo "Rancher server $my_id is $state. Preparing to die." | slack -p -a "warning" &> /dev/null

    # Remove the message from the queue
    aws sqs delete-message \
      --region $region \
      --queue-url $instance_queue_url \
      --receipt-handle $receipt_handle

    break
  fi

  terminating=$(curl -sf http://instance-data/latest/meta-data/spot/termination-time)
  if [[ "$terminating" != "" ]]; then
    echo "Spot instance $my_id is scheduled for termination. Preparing to die." | slack -p -a 'warning'
    break
  fi
done

curl -sf http://localhost:$TERMINATOR_PORT
