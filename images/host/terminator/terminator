#!/bin/bash

my_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
my_region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)

ELB_NAME=${ELB_NAME}
RANCHER_SCHEME=${RANCHER_SCHEME:?"RANCHER_SCHEME must be set"}
RANCHER_HOSTNAME=${RANCHER_HOSTNAME:?"RANCHER_HOSTNAME must be set"}
CREDENTIALS_FILE=${CREDENTIALS_FILE:?"CREDENTIALS_FILE must be set"}
TOKEN_FILE=${TOKEN_FILE:?"TOKEN_FILE must be set"}

function success () {
  echo -ne "HTTP/1.1 200 OK\r\n"
  echo -ne "Content-Type: text/plain\r\n"
  echo -ne "Content-Length: 37\r\n"
  echo -ne "\r\n"
  echo -ne "Come with me if you want to live.\r\n"
  echo -ne "\r\n"
}

function error () {
  echo -ne "HTTP/1.1 500 OK\r\n"
  echo -ne "Content-Type: text/plain\r\n"
  echo -ne "Content-Length: 37\r\n"
  echo -ne "\r\n"
  echo -ne "Come with me if you want to live.\r\n"
  echo -ne "\r\n"
}

while read line
do
  test "$line" = $'\r' && break
done

if ! mkdir /tmp/dead 2>/dev/null; then
  error
  exit
fi

echo "Rancher host $my_id received a termination signal" | \
  slack -p -a "warning" &> /dev/null

#
# Remove myself from load balancer (if available)
#

if [[ "$ELB_NAME" != "" ]]; then
  aws elb deregister-instances-from-load-balancer \
    --region $my_region \
    --load-balancer-name $ELB_NAME \
    --instances $my_id
fi

aws s3 cp ${CREDENTIALS_FILE} credentials &> /dev/null || true
if [[ -e ./credentials ]]; then source ./credentials; fi

aws s3 cp ${TOKEN_FILE} token &> /dev/null || true
if [[ -e ./token ]]; then source ./token; fi

#
# Gracefully stop all services
#

if [[ "$RANCHER_ACCESS_KEY" != "" && "$RANCHER_SECRET_KEY" != "" ]]; then

  host_data=$(curl -sf -X GET \
      -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
      -H 'Accept: application/json' \
      "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/hosts?name=${my_id}" \
      | jq -r ".data[]")

  host_id=$(echo "$host_data" | jq -r .id)
  host_labels=$(echo "$host_data" | jq -r '.labels | to_entries | map("--short-field " + .key + " " + .value) | .[]' | tr '\n' ' ')

  if [[ "$host_id" != "" ]]; then
    echo "Decommissioning rancher agent $host_id..." | \
          slack -p -a "warning" $host_labels &> /dev/null

    state=$(curl -sf -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
      -X POST \
      -H 'Accept: application/json' \
      -H 'Content-Type: application/json' \
      -d '{}' \
      ${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/hosts/${host_id}/?action=deactivate | jq -r .state)

    while [[ "$state" != "" && "$state" != "inactive" ]]; do
      state=$(curl -sf -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
        ${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/hosts/$host_id | jq -r .state)
      sleep 1
    done

    echo "Removing $host_id"
    state=$(curl -sf -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
      -X POST \
      -H 'Accept: application/json' \
      -H 'Content-Type: application/json' \
      -d '{}' \
      ${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/hosts/$host_id/?action=remove | jq -r .state)

    while [[ "$state" != "" && "$state" != "removed" ]]; do
      state=$(curl -sf -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
        ${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/hosts/$host_id | jq -r .state)
    done

    echo "Purging $host_id"
    state=$(curl -sf -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
      -X POST \
      -H 'Accept: application/json' \
      -H 'Content-Type: application/json' \
      -d '{}' \
      ${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/hosts/$host_id/?action=purge | jq -r .state)

    while [[ "$state" != "" && "$state" != "purged" ]]; do
      state=$(curl -sf -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
        ${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/hosts/$host_id | jq -r .state)
    done

    echo "Successfully decommissioned rancher agent $host_id" | \
      slack -p -a "good" &> /dev/null
  else
    echo "Hostname ${my_id} is not registered with rancher. Skipping host deactivation." | \
      slack -p -a "danger" &> /dev/null
  fi
else
  echo "Rancher credentials are not available to ${my_id}. You may need to deactivate this host manually at ${RANCHER_SCHEME}://${RANCHER_HOSTNAME}" | \
    slack -p -a "danger" &> /dev/null
fi

system-docker exec serf serf leave &> /dev/null || true
system-docker stop serf &> /dev/null || true

success
