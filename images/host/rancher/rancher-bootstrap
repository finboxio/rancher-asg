#! /bin/bash

CREDENTIALS_FILE=${CREDENTIALS_FILE:?"CREDENTIALS_FILE must be set"}
TOKEN_FILE=${TOKEN_FILE:?"TOKEN_FILE must be set"}
ENVIRONMENT_TAG=${TAG_DEPLOYMENT_ENVIRONMENT:?"TAG_DEPLOYMENT_ENVIRONMENT must be set"}
ENVIRONMENT_NAME=${ENVIRONMENT_NAME:?"ENVIRONMENT_NAME must be set"}
ENVIRONMENT_TYPE=${ENVIRONMENT_TYPE:-cattle}
RANCHER_HOSTNAME=${RANCHER_HOSTNAME:?"RANCHER_HOSTNAME must be set"}
RANCHER_SCHEME=${RANCHER_SCHEME:-https}
SERF_CONTAINER=${SERF_CONTAINER:-serf}
GRACE_PERIOD=${GRACE_PERIOD:-60}

# If serf is not running, continue on
if ! (system-docker inspect $SERF_CONTAINER &> /dev/null); then
  echo "Cannot bootstrap rancher host because serf is not running. Exiting in 30s"
  sleep 30
  exit 1
fi

# Allow grace period to make sure serf is stable before registering
current=$(date +%s)
started=$(date -d "$(system-docker inspect $SERF_CONTAINER \
  | jq -r .[0].State.StartedAt \
  | cut -d . -f 1 \
  | awk '{print $1}' \
  | tr 'T' ' ')" +%s)
uptime=$((current - started))
if [[ "$uptime" -lt "$GRACE_PERIOD" ]]; then
  echo "Cannot bootstrap rancher host because serf is not ready. Exiting in 30s"
  sleep 30
  exit 1
fi

self=$(curl -s http://instance-data/latest/meta-data/local-ipv4)
public=$(curl -s http://instance-data/latest/meta-data/public-ipv4)
instance_id=$(curl -s http://instance-data/latest/meta-data/instance-id)
region=$(curl -s http://instance-data/latest/dynamic/instance-identity/document | jq -r .region)
zone=$(curl -s http://instance-data/latest/dynamic/instance-identity/document | jq -r .availabilityZone)
instance_type=$(curl -s http://instance-data/latest/dynamic/instance-identity/document | jq -r .instanceType)
tags=$(aws ec2 describe-instances --region $region --instance-ids $instance_id | jq -r '.Reservations[0].Instances[0].Tags | map(.Key + "=" + .Value) | reduce .[] as $tag (""; . + $tag + "&")')
labels="${tags}instance-type=${instance_type}&zone=${zone}&region=${region}&public-ip=${public}&private-ip=${self}&"
members=($(serf members -format json \
  | jq -r '.members
    | sort_by(.tags.up)
    | .[]
    | select(.status == "alive")
    | select(.tags.environment == "'$ENVIRONMENT_TAG'")
    | .addr' \
  | awk -F: '{ print $1 }'))

pong=$(curl -sf --max-time 3 ${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/ping)
if [[ "$pong" != "pong" ]]; then
  echo "Cannot bootstrap rancher host because ${RANCHER_SCHEME}://${RANCHER_HOSTNAME} is not available. Exiting in 30s"
  sleep 30
  exit 1
fi

# Check s3 bucket for launch script
echo 'Checking S3 bucket for environment configuration'
aws s3 cp ${CREDENTIALS_FILE} credentials &> /dev/null || true
if [[ -e ./credentials ]]; then source ./credentials; fi

if [[ -z $RANCHER_ACCESS_KEY || -z $RANCHER_SECRET_KEY ]]; then
  echo "Cannot bootstrap rancher host because credentials are unavailable. Exiting in 30s"
  sleep 30
  exit 1
fi

aws s3 cp ${TOKEN_FILE} token &> /dev/null || true
if [[ -e ./token ]]; then source ./token; fi

# If environment does not exist, create it
EXISTING_NAME=$(curl -sf -X GET \
  -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
  -H 'Accept: application/json' \
  "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/projects/${RANCHER_ENVIRONMENT_ID}" | jq -r .name)

EXISTING_TOKEN=$(curl -sf -X GET \
  -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
  -H 'Accept: application/json' \
  "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/projects/${RANCHER_ENVIRONMENT_ID}/registrationtokens/${RANCHER_REGISTRATION_TOKEN_ID}" | jq -r .command)

if [[ "$EXISTING_NAME" != "$ENVIRONMENT_NAME" || "$EXISTING_TOKEN" == "" ]]; then
  CREATE_ENVIRONMENT="true"
fi

if [[ "$CREATE_ENVIRONMENT" == "true" && "$self" == "${members[0]}" ]]; then
  echo "Setting up new $ENVIRONMENT_TYPE environment $ENVIRONMENT_NAME from host $instance_id" | slack -p -a "good"
  echo 'Getting account id of environment owner'

  ACCOUNT_ID=
  while [[ "$ACCOUNT_ID" == "" ]]; do
    ACCOUNT_ID=$(curl -sf -X GET \
      -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
      -H 'Accept: application/json' \
      "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/apikeys?publicValue=${RANCHER_ACCESS_KEY}" | jq -r .data[0].accountId)
    sleep 2
  done

  echo "Creating environment with owner $ACCOUNT_ID"
  if [[ "$ENVIRONMENT_TYPE" == "swarm" ]]; then IS_SWARM="true"; else IS_SWARM="false"; fi
  if [[ "$ENVIRONMENT_TYPE" == "kubernetes" ]]; then IS_KUBERNETES="true"; else IS_KUBERNETES="false"; fi
  if [[ "$ENVIRONMENT_TYPE" == "mesos" ]]; then IS_MESOS="true"; else IS_MESOS="false"; fi
  ENVIRONMENT_ID=$(curl -sf -X POST \
    -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
    -H 'Accept: application/json' \
    -H 'Content-Type: application/json' \
    -d '{
      "description": "Auto-generated '${ENVIRONMENT_NAME}' environment",
      "name": "'${ENVIRONMENT_NAME}'",
      "allowSystemRole": false,
      "members": [
        {
          "externalId": "'${ACCOUNT_ID}'",
          "externalIdType": "rancher_id",
          "role": "owner"
        }
      ],
      "swarm": '$IS_SWARM',
      "kubernetes": '$IS_KUBERNETES',
      "mesos": '$IS_MESOS',
      "virtualMachine": false,
      "publicDns": false,
      "servicesPortRange": null
    }' \
    "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/projects" | jq -r .id)

  if [[ "$ENVIRONMENT_ID" == "" ]]; then
    echo "Host $instance_id failed to create $ENVIRONMENT_TYPE environment $ENVIRONMENT_NAME." | slack -p -a 'danger'
    sleep 30
    exit 1
  fi

  echo "Waiting for environment $ENVIRONMENT_ID to finish registering"
  state=
  while [[ "$state" != "active" ]]; do
    sleep 2
    state=$(curl -sf -X GET \
      -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
      -H 'Accept: application/json' \
      "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/projects/$ENVIRONMENT_ID" | jq -r .state)
  done

  echo "Generating registration token for environment ${ENVIRONMENT_ID}"
  ## generate rancher registration token
  RANCHER_REGISTRATION_TOKEN_ID=$(curl -sf -X POST \
    -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
    -H 'Accept: application/json' \
    -H 'Content-Type: application/json' \
    -d "{ \
      \"name\":\"$ENVIRONMENT_NAME\", \
      \"description\":\"Auto-generated registration token for $ENVIRONMENT_NAME hosts\" \
    }" \
    "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/projects/${ENVIRONMENT_ID}/registrationtokens" | jq -r .id)

  if [[ "$RANCHER_REGISTRATION_TOKEN_ID" == "" ]]; then
    echo "Host $instance_id failed to create registration token for $ENVIRONMENT_TYPE environment $ENVIRONMENT_NAME." | slack -p -a 'danger'
    sleep 30
    exit 1
  fi

  state=
  while [[ "$state" != "active" ]]; do
    sleep 2
    state=$(curl -sf -X GET \
      -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
      -H 'Accept: application/json' \
      "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/registrationtokens/$RANCHER_REGISTRATION_TOKEN_ID" | jq -r .state)
  done

  rm -f token || true
  touch token
  echo "export RANCHER_ENVIRONMENT_ID=$ENVIRONMENT_ID" >> token
  echo "export RANCHER_REGISTRATION_TOKEN_ID=$RANCHER_REGISTRATION_TOKEN_ID" >> token
  aws s3 cp token ${TOKEN_FILE}
  source token

  echo "Host $instance_id successfully created $ENVIRONMENT_TYPE environment $ENVIRONMENT_NAME." | slack -p -a 'good'
elif [[ "$CREATE_ENVIRONMENT" == "true" ]]; then
  echo 'Cannot bootstrap rancher host because environment is not ready. Exiting in 30s'
  sleep 30
  exit 1
fi

RANCHER_HOST_LABELS=$labels$RANCHER_HOST_LABELS
echo 'Registering host '${instance_id}' with labels '$RANCHER_HOST_LABELS | slack -p -a 'good'

cmd=$(curl -sf -X GET \
  -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
  -H 'Accept: application/json' \
  "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/registrationtokens/$RANCHER_REGISTRATION_TOKEN_ID" | jq -r .command)

if [[ "$cmd" == "" ]]; then
  echo "Failed to register host $instance_id with $ENVIRONMENT_TYPE environment $ENVIRONMENT_NAME." | slack -p -a 'danger'
  sleep 30
  exit 1
fi

COMMAND=(docker run -e CATTLE_AGENT_IP=${self} -e CATTLE_HOST_LABELS=$RANCHER_HOST_LABELS ${cmd#*run})
${COMMAND[@]}

hn=$(hostname)
name=$(curl -sf -X GET \
  -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
  -H 'Accept: application/json' \
  "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/projects/${RANCHER_ENVIRONMENT_ID}/hosts?name=${instance_id}" \
  | jq ".data[] | .name")

while [[ "${name}" != "${instance_id}" ]]; do
  # Get my host entry and update the name
  echo "updating name from $name to $instance_id"
  host=$(curl -sf -X GET \
    -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
    -H 'Accept: application/json' \
    "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/projects/${RANCHER_ENVIRONMENT_ID}/hosts?name_null" \
    | jq ".data[] | select(.hostname == \"${hn}\") | .name = \"${instance_id}\"")

  # Commit name update
  host_id=$(echo "${host}" | jq -r .id)
  curl -sf -X PUT \
    -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
    -H 'Content-Type: application/json' \
    -H 'Accept: application/json' \
    -d "${host}" \
    "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/projects/${RANCHER_ENVIRONMENT_ID}/hosts/${host_id}"

  sleep 5

  # Verify name change is committed
  name=$(curl -sf -X GET \
    -u "${RANCHER_ACCESS_KEY}:${RANCHER_SECRET_KEY}" \
    -H 'Accept: application/json' \
    "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/projects/${RANCHER_ENVIRONMENT_ID}/hosts?name=${instance_id}" \
    | jq -r ".data[] | .name")
done

echo ":cow: Host $instance_id was successfully registered with rancher! View this instance at ${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/env/${RANCHER_ENVIRONMENT_ID}/infra/hosts/${host_id}/containers" | slack -p -a 'good'
