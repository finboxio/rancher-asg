#!/bin/bash

INSTANCE_ID=$(curl -s http://instance-data/latest/meta-data/instance-id)
PUBLIC_IP=$(curl -s http://instance-data/latest/meta-data/public-ipv4)
RANCHER_SCHEME=${RANCHER_SCHEME:?"RANCHER_SCHEME must be set"}
RANCHER_HOSTNAME=${RANCHER_HOSTNAME:?"RANCHER_HOSTNAME must be set"}
CREDENTIALS_FILE=${CREDENTIALS_FILE:?"CREDENTIALS_FILE must be set"}
TOKEN_FILE=${TOKEN_FILE:?"TOKEN_FILE must be set"}

function success () {
  echo -ne "HTTP/1.1 200 OK\r\n"
  echo -ne "Content-Type: text/plain\r\n"
  echo -ne "Content-Length: 37\r\n"
  echo -ne "\r\n"
  echo -ne "Come with me if you want to live.\r\n"
  echo -ne "\r\n"
}

function error () {
  echo -ne "HTTP/1.1 500 OK\r\n"
  echo -ne "Content-Type: text/plain\r\n"
  echo -ne "Content-Length: 37\r\n"
  echo -ne "\r\n"
  echo -ne "Come with me if you want to live.\r\n"
  echo -ne "\r\n"
}

while read line
do
  test "$line" = $'\r' && break
done

if [[ ! -e .credentials ]]; then
  aws s3 cp ${CREDENTIALS_FILE} credentials &> /dev/null || true
  if [[ -e ./credentials ]]; then source ./credentials; fi
fi

if [[ ! -e .token ]]; then
  aws s3 cp ${TOKEN_FILE} token &> /dev/null || true
  if [[ -e ./token ]]; then source ./token; fi
fi

if [[ "$CATTLE_ACCESS_KEY" == "" || "$CATTLE_SECRET_KEY" == "" || "${RANCHER_ENVIRONMENT_ID}" == "" ]]; then
  error
  exit
fi

# Don't report a failure if the rancher server is offline
# (Otherwise we risk losing all of our hosts in the master goes down)
pong=$(curl -sf "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/ping")

if [[ "$pong" != "pong" ]]; then
  success
  exit
fi

# Verify that this host is registered
host=$(curl -sf -X GET \
  -u "${CATTLE_ACCESS_KEY}:${CATTLE_SECRET_KEY}" \
  -H 'Accept: application/json' \
  "${RANCHER_SCHEME}://${RANCHER_HOSTNAME}/v1/projects/${RANCHER_ENVIRONMENT_ID}/hosts?name=${INSTANCE_ID}" \
  | jq ".data[]")

if [[ "$host" == "" ]]; then
  error
  exit
fi

# Verify that this host is active
state=$(echo "$host" | jq -r .state)

if [[ "$state" != "active" ]]; then
  error
  exit
fi

# Verify that this host is not transitioning
transitioning=$(echo "$host" | jq -r .transitioning)

if [[ "$transitioning" != "no" ]]; then
  error
  exit
fi

success
