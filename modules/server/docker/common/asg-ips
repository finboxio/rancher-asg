#! /bin/bash
export AWS_DEFAULT_REGION=$(curl -s http://instance-data/latest/dynamic/instance-identity/document | jq --raw-output .region)
if [[ ! $AWS_DEFAULT_REGION ]]; then
    echo "$pkg: failed to get region"
    exit 1
fi

ec2_instance_id=$(curl -s http://instance-data/latest/meta-data/instance-id)
if [[ ! $ec2_instance_id ]]; then
    echo "$pkg: failed to get instance id from instance metadata"
    exit 2
fi

asg_name=$(aws autoscaling describe-auto-scaling-groups \
    | jq -r ".[] \
    | map(select(.Instances[].InstanceId | contains(\"$ec2_instance_id\"))) \
    | .[].AutoScalingGroupName")

asg_min_size=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name "$asg_name" | jq -r ".AutoScalingGroups[0].MinSize")

asg_instance_ids=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name "$asg_name" \
    | jq -r ".AutoScalingGroups[0].Instances[] | select(.LifecycleState == \"InService\") | .InstanceId" \
    | xargs)

peer_urls=$(aws ec2 describe-instances --instance-ids $asg_instance_ids \
    | jq ".Reservations[].Instances[]" \
    | jq -r -s ". | sort_by(.LaunchTime) | .[].PrivateIpAddress | select(. != null)" \
    | xargs)

if [[ ! $peer_urls ]]; then
    echo "$pkg: unable to find members of auto scaling group"
    exit 5
fi

echo $peer_urls
