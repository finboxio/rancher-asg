#! /bin/bash

S3_BUCKET=${S3_BUCKET:?"S3_BUCKET must be set"}
CREDENTIALS_FILE=${CREDENTIALS_FILE:?"CREDENTIALS_FILE must be set"}

MYSQL_HOST=${MYSQL_HOST:-localhost}
HAPROXY_MYSQL_PORT=${HAPROXY_MYSQL_PORT:?"HAPROXY_MYSQL_PORT must be set"}

RANCHER_MYSQL_USER=${RANCHER_MYSQL_USER:?"RANCHER_MYSQL_USER must be set"}
RANCHER_MYSQL_PASSWORD=${RANCHER_MYSQL_PASSWORD:?"RANCHER_MYSQL_PASSWORD must be set"}
RANCHER_MYSQL_DATABASE=${RANCHER_MYSQL_DATABASE:?"RANCHER_MYSQL_DATABASE must be set"}
RANCHER_ADMIN_USER=${RANCHER_ADMIN_USER:?"RANCHER_ADMIN_USER must be set"}
RANCHER_ADMIN_PASSWORD=${RANCHER_ADMIN_PASSWORD:?"RANCHER_ADMIN_PASSWORD must be set"}
RANCHER_PORT=${RANCHER_PORT:-80}
RANCHER_VERSION=${RANCHER_VERSION:-"latest"}
RANCHER_IMAGE=rancher/server:${RANCHER_VERSION}

BOOTSTRAP_TIMEOUT=${BOOTSTRAP_TIMEOUT:-600}

SERF_CONTAINER=${SERF_CONTAINER:-serf}

API_KEY_NAME=${API_KEY_NAME:-ASG API Key}
API_KEY_DESCRIPTION=${API_KEY_DESCRIPTION:-Autogenerated API key used to bootstrap asg rancher environments}

self=$(ec2-ip)
credentials=rancher-credentials

# If serf is not running, exit and try again
if ! (docker inspect $SERF_CONTAINER &> /dev/null); then sleep 10; exit 1; fi

echo 'Waiting for local MySQL to join primary component'
attempts=$((BOOTSTRAP_TIMEOUT / 10))

for ((; attempts>=0; attempts--)); do
  # Get list of all serf members
  ips=($(serf members -format json | jq -r '.members | sort_by(.tags.up) | .[] | select(.status == "alive") | .addr' | awk -F: '{ print $1 }'))

  # Check that local mysql is operation
  status=$(mysql \
    --protocol tcp \
    -h $MYSQL_HOST \
    -P $HAPROXY_MYSQL_PORT \
    -u $RANCHER_MYSQL_USER \
    -p$RANCHER_MYSQL_PASSWORD \
    -sse "select VARIABLE_VALUE from information_schema.GLOBAL_STATUS where VARIABLE_NAME='wsrep_cluster_status';")

  # Check that all visible members are routing to the same instance
  leaders=$(echo "${ips[@]}" | tr ' ' '\n' \
    | xargs -I{} -0 mysql \
      --protocol tcp \
      --host {} \
      --port $HAPROXY_MYSQL_PORT \
      --user $RANCHER_MYSQL_USER \
      -p$RANCHER_MYSQL_PASSWORD \
      -sse "select VARIABLE_VALUE from information_schema.GLOBAL_STATUS where VARIABLE_NAME='wsrep_local_index';" \
    | sort \
    | uniq \
    | wc -w)

  if [[ "$status" == "Primary" && "$leaders" == "1" ]]; then
    break
  fi
  echo 'Waiting for MySQL...'
  sleep 10
done

if [[ "$attempts" == "0" ]]; then
  echo >&2 'Bootstrap timed out waiting for MySQL to initialize.'
  exit 1
fi

aws s3 cp ${CREDENTIALS_FILE} credentials || true
if [[ -e credentials ]]; then source credentials; fi

api_key=$(mysql \
    --protocol tcp \
    -h $MYSQL_HOST \
    -P $HAPROXY_MYSQL_PORT \
    -D $RANCHER_MYSQL_DATABASE \
    -u $RANCHER_MYSQL_USER \
    -p$RANCHER_MYSQL_PASSWORD \
    -sse "select public_value from credential where name='$API_KEY_NAME';" || true);

if [[ ("$CATTLE_ACCESS_KEY" == "" || "$api_key" != "$CATTLE_ACCESS_KEY") && "$self" == "${ips[0]}" ]]; then
  mysql \
    --protocol tcp \
    -h $MYSQL_HOST \
    -P $HAPROXY_MYSQL_PORT \
    -D $RANCHER_MYSQL_DATABASE \
    -u $RANCHER_MYSQL_USER \
    -p$RANCHER_MYSQL_PASSWORD \
    -sse "delete from credential where name='$API_KEY_NAME';" || true

  # Temporarily disable auth in case we're using a backup db that had auth enabled
  mysql \
    --protocol tcp \
    -h $MYSQL_HOST \
    -P $HAPROXY_MYSQL_PORT \
    -D $RANCHER_MYSQL_DATABASE \
    -u $RANCHER_MYSQL_USER \
    -p$RANCHER_MYSQL_PASSWORD \
    -sse 'update setting set value="false" where name="api.security.enabled";' || true

  # Bootstrap the database
  docker rm -fv rancher-bootstrap >/dev/null 2>&1 || true
  id=$(docker run -d --restart=always -p 8080:8080 \
    --name rancher-bootstrap \
    -e CATTLE_DB_CATTLE_MYSQL_HOST=$self \
    -e CATTLE_DB_CATTLE_MYSQL_PORT=$HAPROXY_MYSQL_PORT \
    -e CATTLE_DB_CATTLE_MYSQL_NAME=$RANCHER_MYSQL_DATABASE \
    -e CATTLE_DB_CATTLE_USERNAME=$RANCHER_MYSQL_USER \
    -e CATTLE_DB_CATTLE_PASSWORD=$RANCHER_MYSQL_PASSWORD \
    ${RANCHER_IMAGE})

  echo "Started bootstrap container $id"

  for ((; attempts>=0; attempts--)); do
    if curl -sf http://$self:8080/v1 &> /dev/null; then
      break
    fi
    echo 'Waiting for bootstrap container to come online...'
    sleep 10
  done

  if [[ "$attempts" -le "0" ]]; then
    echo >&2 'Bootstrap timed out waiting for rancher server to initialize.'
    docker rm -fv rancher-bootstrap >/dev/null 2>&1 || true
    exit 1
  fi

  echo 'Generating an admin api key'
  admin=
  while [[ "$admin" == "" ]]; do
    admin=$(curl -sf http://$self:8080/v1/accounts | jq -r '.data[] | select(.name=="admin") | .id')
  done

  key=
  while [[ "$key" == "" ]]; do
    key=$(curl -f -X POST \
      -H 'Accept: application/json' \
      -H 'Content-Type: application/json' \
      -d "{\"accountId\":\"$admin\", \"name\":\"$API_KEY_NAME\", \"description\":\"$API_KEY_DESCRIPTION\"}" \
      "http://$self:8080/v1/apikeys")
    sleep 5
  done

  CATTLE_ACCESS_KEY=$(echo "$key" | jq '.publicValue')
  CATTLE_SECRET_KEY=$(echo "$key" | jq '.secretValue')
  rm -f credentials
  touch credentials
  echo "export CATTLE_ACCESS_KEY=$CATTLE_ACCESS_KEY" >> credentials
  echo "export CATTLE_SECRET_KEY=$CATTLE_SECRET_KEY" >> credentials

  echo 'Creating admin user and enabling authentication'
  curl -sf -X POST \
    -H 'Accept: application/json' \
    -H 'Content-Type: application/json' \
    -d '{
      "accessMode":"unrestricted",
      "enabled":true,
      "name":"admin",
      "password":"'${RANCHER_ADMIN_PASSWORD}'",
      "username":"'${RANCHER_ADMIN_USER}'"
    }' \
    "http://$self:8080/v1/localauthconfigs"

  echo 'Bootstrap completed successfully.'
  docker rm -fv rancher-bootstrap >/dev/null 2>&1 || true

  aws s3 cp credentials ${CREDENTIALS_FILE}
fi

rancher=$(docker inspect rancher | jq -r .[].Id)
if [[ "$CATTLE_ACCESS_KEY" != "" && "$api_key" == "$CATTLE_ACCESS_KEY" && "$rancher" == "" ]]; then
  docker run -d --restart=always -p ${RANCHER_PORT}:8080 \
    --name rancher \
    -e CATTLE_DB_CATTLE_MYSQL_PORT=$HAPROXY_MYSQL_PORT \
    -e CATTLE_DB_CATTLE_MYSQL_HOST=$self \
    -e CATTLE_DB_CATTLE_MYSQL_NAME=$RANCHER_MYSQL_DATABASE \
    -e CATTLE_DB_CATTLE_USERNAME=$RANCHER_MYSQL_USER \
    -e CATTLE_DB_CATTLE_PASSWORD=$RANCHER_MYSQL_PASSWORD \
    ${RANCHER_IMAGE}
elif [[ "$rancher" != "" ]]; then
  echo 'Rancher is already running.'
  exit 0
else
  echo 'Cannot bootstrap rancher server. Exiting in 30s'
  sleep 30
  exit 1
fi
